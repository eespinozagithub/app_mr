// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransportesMR.Data;

#nullable disable

namespace TransportesMR.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221126013242_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TransportesMR.Models.Camion", b =>
                {
                    b.Property<int>("IdCamion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Anio")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Chasis")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float?>("Cilindrada")
                        .HasColumnType("float");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Estado")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("IdModelo")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("NumeroCamion")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("NumeroMotor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdCamion");

                    b.HasIndex("IdModelo");

                    b.ToTable("Camion");
                });

            modelBuilder.Entity("TransportesMR.Models.CargaCombustible", b =>
                {
                    b.Property<int>("IdCargaCombustible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CamionIdCamion")
                        .HasColumnType("int");

                    b.Property<int?>("Combustible")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("FacturaCarga")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCargaCombustible")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCamion")
                        .HasColumnType("int");

                    b.Property<decimal>("Kilometraje")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Litros")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("LugarCarga")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioLitros")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("IdCargaCombustible");

                    b.HasIndex("CamionIdCamion");

                    b.ToTable("CargaCombustible");
                });

            modelBuilder.Entity("TransportesMR.Models.CargaCombustibleRemolque", b =>
                {
                    b.Property<int>("IdCargaCombustibleRemolque")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Combustible")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("FacturaCarga")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCargaCombustible")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdRemolque")
                        .HasColumnType("int");

                    b.Property<decimal>("Litros")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("LugarCarga")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioLitros")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("IdCargaCombustibleRemolque");

                    b.HasIndex("IdRemolque");

                    b.ToTable("CargaCombustibleRemolque");
                });

            modelBuilder.Entity("TransportesMR.Models.Ciudades", b =>
                {
                    b.Property<int>("IdCiudad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IdCiudad");

                    b.ToTable("Ciudades");
                });

            modelBuilder.Entity("TransportesMR.Models.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApellidosEncargado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailContacto")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Giro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombresEncargado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("TelefonoEncargado")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("IdEmpresa");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("TransportesMR.Models.MarcaRemolque", b =>
                {
                    b.Property<int>("IdMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdMarca");

                    b.ToTable("MarcaRemolque");
                });

            modelBuilder.Entity("TransportesMR.Models.MarcaVehiculo", b =>
                {
                    b.Property<int>("IdMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdMarca");

                    b.ToTable("MarcaVehiculo");
                });

            modelBuilder.Entity("TransportesMR.Models.ModeloRemolque", b =>
                {
                    b.Property<int>("IdModelo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdModelo");

                    b.HasIndex("IdMarca");

                    b.ToTable("ModeloRemolque");
                });

            modelBuilder.Entity("TransportesMR.Models.ModeloVehiculo", b =>
                {
                    b.Property<int>("IdModelo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdModelo");

                    b.HasIndex("IdMarca");

                    b.ToTable("ModeloVehiculo");
                });

            modelBuilder.Entity("TransportesMR.Models.Remolque", b =>
                {
                    b.Property<int>("IdRemolque")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Anio")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Capacidad")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IdModelo")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("NumeroChasis")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("NumeroRemolque")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("TipoRemolque")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("IdRemolque");

                    b.HasIndex("IdModelo");

                    b.ToTable("Remolque");
                });

            modelBuilder.Entity("TransportesMR.Models.Trabajador", b =>
                {
                    b.Property<int>("IdTrabajador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Comuna")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ContratoFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ContratoInicio")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Estado")
                        .HasColumnType("int");

                    b.Property<int?>("EstadoCivil")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaNacimiento")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LicenciaConducirCodigoBarra")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("LicenciaConducirTipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LicenciaConducirVencimiento")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Sexo")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SueldoBase")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Telefono")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TelefonoEmergencia")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("IdTrabajador");

                    b.ToTable("Trabajador");
                });

            modelBuilder.Entity("TransportesMR.Models.Vueltas", b =>
                {
                    b.Property<int>("IdVueltas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Factura1")
                        .HasColumnType("int");

                    b.Property<int?>("Factura2")
                        .HasColumnType("int");

                    b.Property<int?>("Factura3")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaLlegada")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaSalida")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCamion")
                        .HasColumnType("int");

                    b.Property<int?>("IdCiudadCarga")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("IdCiudadDescarga")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("IdEmpresaCarga")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("IdEmpresaDescarga")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("IdEmpresaResponsable")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("IdRemolque")
                        .HasColumnType("int");

                    b.Property<int>("IdTrabajador")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("PorcentajeConductor")
                        .IsRequired()
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Sentido")
                        .HasColumnType("int");

                    b.Property<decimal?>("ValorViaje")
                        .IsRequired()
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ViaticoGastado")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ViaticoTransferido")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("IdVueltas");

                    b.HasIndex("IdCamion");

                    b.HasIndex("IdCiudadCarga");

                    b.HasIndex("IdCiudadDescarga");

                    b.HasIndex("IdEmpresaCarga");

                    b.HasIndex("IdEmpresaDescarga");

                    b.HasIndex("IdEmpresaResponsable");

                    b.HasIndex("IdRemolque");

                    b.HasIndex("IdTrabajador");

                    b.ToTable("Vueltas");
                });

            modelBuilder.Entity("TransportesMR.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransportesMR.Models.Camion", b =>
                {
                    b.HasOne("TransportesMR.Models.ModeloVehiculo", "ModeloVehiculo")
                        .WithMany()
                        .HasForeignKey("IdModelo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModeloVehiculo");
                });

            modelBuilder.Entity("TransportesMR.Models.CargaCombustible", b =>
                {
                    b.HasOne("TransportesMR.Models.Camion", "Camion")
                        .WithMany()
                        .HasForeignKey("CamionIdCamion");

                    b.Navigation("Camion");
                });

            modelBuilder.Entity("TransportesMR.Models.CargaCombustibleRemolque", b =>
                {
                    b.HasOne("TransportesMR.Models.Remolque", "Remolque")
                        .WithMany()
                        .HasForeignKey("IdRemolque")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Remolque");
                });

            modelBuilder.Entity("TransportesMR.Models.ModeloRemolque", b =>
                {
                    b.HasOne("TransportesMR.Models.MarcaRemolque", "MarcaRemolque")
                        .WithMany()
                        .HasForeignKey("IdMarca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarcaRemolque");
                });

            modelBuilder.Entity("TransportesMR.Models.ModeloVehiculo", b =>
                {
                    b.HasOne("TransportesMR.Models.MarcaVehiculo", "MarcaVehiculo")
                        .WithMany()
                        .HasForeignKey("IdMarca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarcaVehiculo");
                });

            modelBuilder.Entity("TransportesMR.Models.Remolque", b =>
                {
                    b.HasOne("TransportesMR.Models.ModeloRemolque", "ModeloRemolque")
                        .WithMany()
                        .HasForeignKey("IdModelo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModeloRemolque");
                });

            modelBuilder.Entity("TransportesMR.Models.Vueltas", b =>
                {
                    b.HasOne("TransportesMR.Models.Camion", "Camion")
                        .WithMany()
                        .HasForeignKey("IdCamion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportesMR.Models.Ciudades", "CiudadCarga")
                        .WithMany("CiudadCarga")
                        .HasForeignKey("IdCiudadCarga")
                        .IsRequired();

                    b.HasOne("TransportesMR.Models.Ciudades", "CiudadDescarga")
                        .WithMany("CiudadDescarga")
                        .HasForeignKey("IdCiudadDescarga")
                        .IsRequired();

                    b.HasOne("TransportesMR.Models.Empresa", "EmpresaCarga")
                        .WithMany("EmpresaCarga")
                        .HasForeignKey("IdEmpresaCarga")
                        .IsRequired();

                    b.HasOne("TransportesMR.Models.Empresa", "EmpresaDescarga")
                        .WithMany("EmpresaDescarga")
                        .HasForeignKey("IdEmpresaDescarga")
                        .IsRequired();

                    b.HasOne("TransportesMR.Models.Empresa", "EmpresaResponsable")
                        .WithMany("EmpresaResponsable")
                        .HasForeignKey("IdEmpresaResponsable")
                        .IsRequired();

                    b.HasOne("TransportesMR.Models.Remolque", "Remolque")
                        .WithMany()
                        .HasForeignKey("IdRemolque")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportesMR.Models.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("IdTrabajador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camion");

                    b.Navigation("CiudadCarga");

                    b.Navigation("CiudadDescarga");

                    b.Navigation("EmpresaCarga");

                    b.Navigation("EmpresaDescarga");

                    b.Navigation("EmpresaResponsable");

                    b.Navigation("Remolque");

                    b.Navigation("Trabajador");
                });

            modelBuilder.Entity("TransportesMR.Models.Ciudades", b =>
                {
                    b.Navigation("CiudadCarga");

                    b.Navigation("CiudadDescarga");
                });

            modelBuilder.Entity("TransportesMR.Models.Empresa", b =>
                {
                    b.Navigation("EmpresaCarga");

                    b.Navigation("EmpresaDescarga");

                    b.Navigation("EmpresaResponsable");
                });
#pragma warning restore 612, 618
        }
    }
}
